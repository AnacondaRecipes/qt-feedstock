diff -up a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.cc b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.cc
--- a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.cc	2017-07-30 11:36:27.462932271 +0200
+++ b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.cc	2017-07-30 11:47:43.773081060 +0200
@@ -40,6 +40,7 @@ namespace google_breakpad {
 
 #if defined(__i386__)
 
+#if __GLIBC__ == 2 && __GLIBC_MINOR__ < 26
 uintptr_t UContextReader::GetStackPointer(const struct ucontext* uc) {
   return uc->uc_mcontext.gregs[REG_ESP];
 }
@@ -49,6 +50,17 @@ uintptr_t UContextReader::GetInstruction
 }
 
 void UContextReader::FillCPUContext(RawContextCPU *out, const ucontext *uc,
+#else
+uintptr_t UContextReader::GetStackPointer(const struct ucontext_t* uc) {
+  return uc->uc_mcontext.gregs[REG_ESP];
+}
+
+uintptr_t UContextReader::GetInstructionPointer(const struct ucontext_t* uc) {
+  return uc->uc_mcontext.gregs[REG_EIP];
+}
+
+void UContextReader::FillCPUContext(RawContextCPU *out, const ucontext_t *uc,
+#endif
                                     const struct _libc_fpstate* fp) {
   const greg_t* regs = uc->uc_mcontext.gregs;
 
@@ -88,6 +100,7 @@ void UContextReader::FillCPUContext(RawC
 
 #elif defined(__x86_64)
 
+#if __GLIBC__ == 2 && __GLIBC_MINOR__ < 26
 uintptr_t UContextReader::GetStackPointer(const struct ucontext* uc) {
   return uc->uc_mcontext.gregs[REG_RSP];
 }
@@ -97,6 +110,17 @@ uintptr_t UContextReader::GetInstruction
 }
 
 void UContextReader::FillCPUContext(RawContextCPU *out, const ucontext *uc,
+#else
+uintptr_t UContextReader::GetStackPointer(const struct ucontext_t* uc) {
+  return uc->uc_mcontext.gregs[REG_RSP];
+}
+
+uintptr_t UContextReader::GetInstructionPointer(const struct ucontext_t* uc) {
+  return uc->uc_mcontext.gregs[REG_RIP];
+}
+
+void UContextReader::FillCPUContext(RawContextCPU *out, const ucontext_t *uc,
+#endif
                                     const struct _libc_fpstate* fpregs) {
   const greg_t* regs = uc->uc_mcontext.gregs;
 
@@ -145,6 +169,7 @@ void UContextReader::FillCPUContext(RawC
 
 #elif defined(__ARM_EABI__)
 
+#if __GLIBC__ == 2 && __GLIBC_MINOR__ < 26
 uintptr_t UContextReader::GetStackPointer(const struct ucontext* uc) {
   return uc->uc_mcontext.arm_sp;
 }
@@ -154,6 +179,17 @@ uintptr_t UContextReader::GetInstruction
 }
 
 void UContextReader::FillCPUContext(RawContextCPU *out, const ucontext *uc) {
+#else
+uintptr_t UContextReader::GetStackPointer(const struct ucontext_t* uc) {
+  return uc->uc_mcontext.arm_sp;
+}
+
+uintptr_t UContextReader::GetInstructionPointer(const struct ucontext_t* uc) {
+  return uc->uc_mcontext.arm_pc;
+}
+
+void UContextReader::FillCPUContext(RawContextCPU *out, const ucontext_t *uc) {
+#endif
   out->context_flags = MD_CONTEXT_ARM_FULL;
 
   out->iregs[0] = uc->uc_mcontext.arm_r0;
@@ -184,6 +220,7 @@ void UContextReader::FillCPUContext(RawC
 
 #elif defined(__aarch64__)
 
+#if __GLIBC__ == 2 && __GLIBC_MINOR__ < 26
 uintptr_t UContextReader::GetStackPointer(const struct ucontext* uc) {
   return uc->uc_mcontext.sp;
 }
@@ -193,6 +230,17 @@ uintptr_t UContextReader::GetInstruction
 }
 
 void UContextReader::FillCPUContext(RawContextCPU *out, const ucontext *uc,
+#else
+uintptr_t UContextReader::GetStackPointer(const struct ucontext_t* uc) {
+  return uc->uc_mcontext.sp;
+}
+
+uintptr_t UContextReader::GetInstructionPointer(const struct ucontext_t* uc) {
+  return uc->uc_mcontext.pc;
+}
+
+void UContextReader::FillCPUContext(RawContextCPU *out, const ucontext_t *uc,
+#endif
                                     const struct fpsimd_context* fpregs) {
   out->context_flags = MD_CONTEXT_ARM64_FULL;
 
@@ -210,6 +258,7 @@ void UContextReader::FillCPUContext(RawC
 
 #elif defined(__mips__)
 
+#if __GLIBC__ == 2 && __GLIBC_MINOR__ < 26
 uintptr_t UContextReader::GetStackPointer(const struct ucontext* uc) {
   return uc->uc_mcontext.gregs[MD_CONTEXT_MIPS_REG_SP];
 }
@@ -219,6 +268,17 @@ uintptr_t UContextReader::GetInstruction
 }
 
 void UContextReader::FillCPUContext(RawContextCPU *out, const ucontext *uc) {
+#else
+uintptr_t UContextReader::GetStackPointer(const struct ucontext_t* uc) {
+  return uc->uc_mcontext.gregs[MD_CONTEXT_MIPS_REG_SP];
+}
+
+uintptr_t UContextReader::GetInstructionPointer(const struct ucontext_t* uc) {
+  return uc->uc_mcontext.pc;
+}
+
+void UContextReader::FillCPUContext(RawContextCPU *out, const ucontext_t *uc) {
+#endif
 #if _MIPS_SIM == _ABI64
   out->context_flags = MD_CONTEXT_MIPS64_FULL;
 #elif _MIPS_SIM == _ABIO32
diff -up a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.h b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.h
--- a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.h	2017-07-30 12:52:32.988349241 +0200
+++ b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.h	2017-07-30 12:52:11.316408145 +0200
@@ -41,6 +41,7 @@ namespace google_breakpad {
 
 // Wraps platform-dependent implementations of accessors to ucontext structs.
 struct UContextReader {
+#if __GLIBC__ == 2 && __GLIBC_MINOR__ < 26
   static uintptr_t GetStackPointer(const struct ucontext* uc);
 
   static uintptr_t GetInstructionPointer(const struct ucontext* uc);
@@ -57,6 +58,24 @@ struct UContextReader {
 #else
   static void FillCPUContext(RawContextCPU *out, const ucontext *uc);
 #endif
+#else
+  static uintptr_t GetStackPointer(const struct ucontext_t* uc);
+
+  static uintptr_t GetInstructionPointer(const struct ucontext_t* uc);
+
+  // Juggle a arch-specific ucontext into a minidump format
+  //   out: the minidump structure
+  //   info: the collection of register structures.
+#if defined(__i386__) || defined(__x86_64)
+  static void FillCPUContext(RawContextCPU *out, const ucontext_t *uc,
+                             const struct _libc_fpstate* fp);
+#elif defined(__aarch64__)
+  static void FillCPUContext(RawContextCPU *out, const ucontext_t *uc,
+                             const struct fpsimd_context* fpregs);
+#else
+  static void FillCPUContext(RawContextCPU *out, const ucontext_t *uc);
+#endif
+#endif
 };
 
 }  // namespace google_breakpad
diff -up a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc
--- a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc	2017-07-30 09:59:19.746657142 +0200
+++ b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc	2017-07-30 12:53:44.195140285 +0200
@@ -439,9 +439,17 @@ bool ExceptionHandler::HandleSignal(int
   // Fill in all the holes in the struct to make Valgrind happy.
   memset(&g_crash_context_, 0, sizeof(g_crash_context_));
   memcpy(&g_crash_context_.siginfo, info, sizeof(siginfo_t));
+#if __GLIBC__ == 2 && __GLIBC_MINOR__ < 26
   memcpy(&g_crash_context_.context, uc, sizeof(struct ucontext));
+#else
+  memcpy(&g_crash_context_.context, uc, sizeof(struct ucontext_t));
+#endif
 #if defined(__aarch64__)
+#if __GLIBC__ == 2 && __GLIBC_MINOR__ < 26
   struct ucontext* uc_ptr = (struct ucontext*)uc;
+#else
+  struct ucontext_t* uc_ptr = (struct ucontext_t*)uc;
+#endif
   struct fpsimd_context* fp_ptr =
       (struct fpsimd_context*)&uc_ptr->uc_mcontext.__reserved;
   if (fp_ptr->head.magic == FPSIMD_MAGIC) {
@@ -452,7 +460,11 @@ bool ExceptionHandler::HandleSignal(int
   // FP state is not part of user ABI on ARM Linux.
   // In case of MIPS Linux FP state is already part of struct ucontext
   // and 'float_state' is not a member of CrashContext.
+#if __GLIBC__ == 2 && __GLIBC_MINOR__ < 26
   struct ucontext* uc_ptr = (struct ucontext*)uc;
+#else
+  struct ucontext_t* uc_ptr = (struct ucontext_t*)uc;
+#endif
   if (uc_ptr->uc_mcontext.fpregs) {
     memcpy(&g_crash_context_.float_state, uc_ptr->uc_mcontext.fpregs,
            sizeof(g_crash_context_.float_state));
@@ -476,7 +488,11 @@ bool ExceptionHandler::SimulateSignalDel
   // ExceptionHandler::HandleSignal().
   siginfo.si_code = SI_USER;
   siginfo.si_pid = getpid();
+#if __GLIBC__ == 2 && __GLIBC_MINOR__ < 26
   struct ucontext context;
+#else
+  struct ucontext_t context;
+#endif
   getcontext(&context);
   return HandleSignal(sig, &siginfo, &context);
 }
diff -up a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.h b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.h
--- a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.h	2017-07-30 09:55:57.967193268 +0200
+++ b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.h	2017-07-30 12:53:12.544233911 +0200
@@ -191,7 +191,11 @@ class ExceptionHandler {
   struct CrashContext {
     siginfo_t siginfo;
     pid_t tid;  // the crashing thread.
+#if __GLIBC__ == 2 && __GLIBC_MINOR__ < 26
     struct ucontext context;
+#else
+    struct ucontext_t context;
+#endif
 #if !defined(__ARM_EABI__) && !defined(__mips__)
     // #ifdef this out because FP state is not part of user ABI for Linux ARM.
     // In case of MIPS Linux FP state is already part of struct
diff -up a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/microdump_writer/microdump_writer.cc b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/microdump_writer/microdump_writer.cc
--- a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/microdump_writer/microdump_writer.cc	2017-07-30 11:35:29.191089683 +0200
+++ b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/microdump_writer/microdump_writer.cc	2017-07-30 11:40:19.410305697 +0200
@@ -571,7 +571,11 @@ class MicrodumpWriter {
 
   void* Alloc(unsigned bytes) { return dumper_->allocator()->Alloc(bytes); }
 
+#if __GLIBC__ == 2 && __GLIBC_MINOR__ < 26
   const struct ucontext* const ucontext_;
+#else
+  const struct ucontext_t* const ucontext_;
+#endif
 #if !defined(__ARM_EABI__) && !defined(__mips__)
   const google_breakpad::fpstate_t* const float_state_;
 #endif
diff -up a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/minidump_writer/minidump_writer.cc b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/minidump_writer/minidump_writer.cc
--- a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/minidump_writer/minidump_writer.cc	2017-07-30 11:35:09.831141982 +0200
+++ b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/minidump_writer/minidump_writer.cc	2017-07-30 11:38:46.527556607 +0200
@@ -1247,7 +1247,11 @@ class MinidumpWriter {
   const int fd_;  // File descriptor where the minidum should be written.
   const char* path_;  // Path to the file where the minidum should be written.
 
+#if __GLIBC__ == 2 && __GLIBC_MINOR__ < 26
   const struct ucontext* const ucontext_;  // also from the signal handler
+#else
+  const struct ucontext_t* const ucontext_;  // also from the signal handler
+#endif
 #if !defined(__ARM_EABI__) && !defined(__mips__)
   const google_breakpad::fpstate_t* const float_state_;  // ditto
 #endif
